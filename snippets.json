{
    "code_samples": [
      {
        "language": "Python",
        "snippets": [
          {
            "code": "def hello_world():\n    print('Hello, world!')",
            "description": "A simple Python hello world function."
          },
          {
            "code": "for i in range(5):\n    print(i)",
            "description": "Python loop to print numbers 0 to 4."
          },
          {
            "code": "def add(a, b):\n    return a + b",
            "description": "Python function to add two numbers."
          },
          {
            "code": "import math\nprint(math.sqrt(16))",
            "description": "Python code to calculate the square root of 16."
          },
          {
            "code": "x = 10\nif x > 5:\n    print('x is greater than 5')",
            "description": "Python conditional statement."
          },
          {
            "code": "colors = ['red', 'green', 'blue']\nfor color in colors:\n    print(color)",
            "description": "Python loop to iterate through a list of colors."
          },
          {
            "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)",
            "description": "Python recursive function to calculate factorial."
          },
          {
            "code": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age",
            "description": "Python class definition for a Person."
          },
          {
            "code": "import random\nprint(random.randint(1, 100))",
            "description": "Python code to generate a random number between 1 and 100."
          },
          {
            "code": "numbers = [1, 2, 3, 4, 5]\nsquared_numbers = [x ** 2 for x in numbers]\nprint(squared_numbers)",
            "description": "Python list comprehension to square numbers."
          },
          {
            "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
            "description": "Python function to check if a number is prime."
          },
          {
            "code": "string = 'Hello, world!'\nprint(len(string))",
            "description": "Python code to find the length of a string."
          },
          {
            "code": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append(fib[-1] + fib[-2])\n        return fib",
            "description": "Python function to generate Fibonacci sequence."
          },
          {
            "code": "x = 5\nwhile x > 0:\n    print(x)\n    x -= 1",
            "description": "Python while loop example."
          },
          {
            "code": "def greet(name):\n    return f'Hello, {name}!'\nprint(greet('Alice'))",
            "description": "Python function to greet a person by name."
          },
          {
            "code": "import datetime\nnow = datetime.datetime.now()\nprint(now)",
            "description": "Python code to get the current date and time."
          },
          {
            "code": "nums = [1, 2, 3, 4, 5]\nsquared_nums = map(lambda x: x ** 2, nums)\nprint(list(squared_nums))",
            "description": "Python map function to square numbers."
          },
          {
            "code": "text = 'Hello, world!'\nsubstring = text[0:5]\nprint(substring)",
            "description": "Python code to extract a substring from a string."
          },
          {
            "code": "def power(base, exponent):\n    return base ** exponent\nprint(power(2, 3))",
            "description": "Python function to calculate power."
          },
          {
            "code": "import json\nperson_data = {'name': 'Alice', 'age': 30}\njson_str = json.dumps(person_data)\nprint(json_str)",
            "description": "Python code to serialize a dictionary to JSON."
          }
        ]
      },
      {
        "language": "JavaScript",
        "snippets": [
          {
            "code": "function greet() {\n    console.log('Hello, world!');\n}",
            "description": "A basic JavaScript greeting function."
          },
          {
            "code": "let numbers = [1, 2, 3, 4, 5];\nconsole.log(numbers);",
            "description": "JavaScript array declaration and logging."
          }
        ]
      },
      {
        "language": "Java",
        "snippets": [
          {
            "code": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println('Hello, world!');\n    }\n}",
            "description": "A Java program that prints 'Hello, world!'"
          },
          {
            "code": "int x = 10;\nint y = 20;\nint sum = x + y;\nSystem.out.println('Sum: ' + sum);",
            "description": "Java program to calculate and print the sum of two numbers."
          }
        ]
      }
        { 
            "language": "Solidity",
            "snippets": [
                {
                    "code": "pragma solidity ^0.8.0;\n contract myContract{\n function greet(string memory _name)  public view returns(string memory){\n return('Greetings ' + _name)\n}\n}",
                    "description": "Solidity program to return user-specific greeting"
                },
                {
                    "code": "pragma solidity ^0.8.0;\n contract Balance_Contract{\n uint balance = 0;\n function addBalance() public returns(uint balance){\n return balance++\n }\n}",
                    "description": "Solidity program to create balance and increase balance"
                }
            ]
        }
      
    ]
  }
  
